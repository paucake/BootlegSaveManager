#!/bin/bash

save_filename="$1"
rom_filename="$2"

if [ ! -f "$save_filename" ]; then
    echo "$save_filename is not a regular file"
    exit 1
fi

if [ ! -f "$rom_filename" ]; then
    echo "$rom_filename is not a regular file"
    exit 1
fi


function copy_sav_to_game {
    printf "\n\n\tCreating ROM backup...\n"
    cp "$rom_filename" "${rom_filename%.*}.backup_$(date +%F_%Hh%Im%Ss).${rom_filename##*.}" && printf "\tBackup successful. File: ${rom_filename%.*}.backup_$(date +%F_%Hh%Im%Ss).${rom_filename##*.}\n\n"
    dd bs=1          seek=$(( ($bank_number + 0) * 0x4000 + 0x2000 )) count=8k status=none conv=notrunc if="$save_filename" of="$rom_filename"
    dd bs=1 skip=8k  seek=$(( ($bank_number + 1) * 0x4000 + 0x2000 )) count=8k status=none conv=notrunc if="$save_filename" of="$rom_filename"
    dd bs=1 skip=16k seek=$(( ($bank_number + 2) * 0x4000 + 0x2000 )) count=8k status=none conv=notrunc if="$save_filename" of="$rom_filename"
    dd bs=1 skip=24k seek=$(( ($bank_number + 3) * 0x4000 + 0x2000 )) count=8k status=none conv=notrunc if="$save_filename" of="$rom_filename"
    printf "\n\tInjection finished.\n\tNow re-write the ROM into the game cartridge.\n\n"
}

function copy_sav_from_game {
    printf "\n\n\tCreating SAV backup...\n"
    cp "$save_filename" "${save_filename%.*}.backup_$(date +%F_%Hh%Im%Ss).${save_filename##*.}" && printf "\tBackup successful. File: ${save_filename%.*}.backup_$(date +%F_%Hh%Im%Ss).${save_filename##*.}\n\n"
    dd bs=1 skip=$(( ($bank_number + 0) * 0x4000 + 0x2000 ))          count=8k status=none conv=notrunc if="$rom_filename" of="$save_filename"
    dd bs=1 skip=$(( ($bank_number + 1) * 0x4000 + 0x2000 )) seek=8k  count=8k status=none conv=notrunc if="$rom_filename" of="$save_filename"
    dd bs=1 skip=$(( ($bank_number + 2) * 0x4000 + 0x2000 )) seek=16k count=8k status=none conv=notrunc if="$rom_filename" of="$save_filename"
    dd bs=1 skip=$(( ($bank_number + 3) * 0x4000 + 0x2000 )) seek=24k count=8k status=none conv=notrunc if="$rom_filename" of="$save_filename"
    printf "\n\tExtraction finished.\n\t$save_filename now contains the save from the ROM.\n\n"
}

# if two banks after another contain only 0xFF in the first half and other data in the second half, then it might be save data
function check_bank_for_sav {
    if [[ "$(dd bs=1 skip=$(( ($1 + 0) * 0x4000          )) count=8k status=none conv=notrunc if="$rom_filename" | sha1sum)" == "5e2b96c19c4f5c63a5afa2de504d29fe64a4c908  -" && \
          "$(dd bs=1 skip=$(( ($1 + 0) * 0x4000 + 0x2000 )) count=8k status=none conv=notrunc if="$rom_filename" | sha1sum)" != "5e2b96c19c4f5c63a5afa2de504d29fe64a4c908  -" && \
          "$(dd bs=1 skip=$(( ($1 + 1) * 0x4000          )) count=8k status=none conv=notrunc if="$rom_filename" | sha1sum)" == "5e2b96c19c4f5c63a5afa2de504d29fe64a4c908  -" && \
          "$(dd bs=1 skip=$(( ($1 + 1) * 0x4000 + 0x2000 )) count=8k status=none conv=notrunc if="$rom_filename" | sha1sum)" != "5e2b96c19c4f5c63a5afa2de504d29fe64a4c908  -" ]]; then
          bank_number=$1
    fi
}

banks_in_rom=$(( $(stat -c%s "$rom_filename") / 0x4000 ))
i=$banks_in_rom
until [ $i -le 8 ] ; do
    i=$(( $i - 4))
    check_bank_for_sav $i
done
if [[ "$bank_number" != "" ]]; then
    printf "\n\tbank autodetected: $(printf '0x%x' $bank_number)\n\n"
    read -p "        Is it Crystal [c] or Yellow [y] or Green [g] or use autodetected bank [a]? --> " ver
else
    read -p "        Is it Crystal [c] or Yellow [y] or Green [g]? --> " ver
fi

echo ""
read -p "        Copy from game to sav [1] or from sav to game [2]? --> " copy


if [ "$ver" = "c" ]; then
    bank_number="0x84" # crystal bank number 0x84-0x87
elif [ "$ver" = "y" ]; then
    bank_number="0x40" # yellow bank number 0x40-0x43
elif [ "$ver" = "g" ]; then
    bank_number="0x34" # green bank number 0x34-0x37
elif [ "$ver" = "a" ]; then
    true
else
    echo "no game selected"
    exit 1
fi


if [ "$copy" = "1" ]; then
    copy_sav_from_game
elif [ "$copy" = "2" ]; then
    copy_sav_to_game
else
    echo "no copy mode selected"
    exit 1
fi
